<!DOCTYPE html>
<html>
<head>
    <title>GROUP PROJECT</title>
    <link rel="stylesheet" type="text/css" href="gppr.css">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="UTF-8">
	<script 
  src="https://cdn.jsdelivr.net/npm/code-prettify@0.1.0/loader/run_prettify.min.js" 
  integrity="sha384-zmh8Dmggdxvu7C40fh1eFJPr2jrabJSODpgn/6OHI8psbd7rR1RPX8zfYr/HGZIr"
  crossorigin="anonymous" >
</script>
	
	                
<script type="text/javascript" id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-chtml.js"
  integrity="sha384-AHAnt9ZhGeHIrydA1Kp1L7FN+2UosbF7RQg6C+9Is/a7kDpQ1684C2iH2VWil6r4"
  crossorigin="anonymous">
</script>
<script>
  window.MathJax = {
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']]
    }
  };
</script>
</head>

<body>
    <header>
     
        <h1>Group PROJECT</h1>
     
    </header>
	<img src="elephant.jpg" width=300px alt="Module image">
<section>
<h3>Research</h3>
</section>
    <main> 
	Let the two chess pieces be the elephant and the pawn, 
	the elephant can only walk diagonally in a square, 
	and can only move up to 3 times the size of the square, 
	and the pawn can go up and down left and right arbitrarily by one square, 
	assuming that the chessboard can be extended infinitely, 
	initially this chessboard is 3 times 3 by the size of 3, 
	but as the chess pieces move, the size of the chessboard can also expand with the movement of the chess pieces, the problem is. At the beginning of the game, the elephant and the pawn are randomly scattered on the chessboard, and then the computer randomly chooses where their next move will go (like walking diagonally, and the pawn is going up and down, 
	left and right at any level), 
	so how many times will the elephant and the pawn meet when N (a big number)? (i.e. in the same square)
	
	</main>
	<section>
	<h3>Analyse</h3>
	</section>
	<main>
	The way of doing this is In fact, 
	it is somewhat similar to the individual project, 
	using the chessboard as a part of the coordinates, 
	and then let python first randomly generate the two coordinate positions of the elephant and the pawn, 
	if they fall together, it doesn't matter, 
	the elephant and the pawn still walk in their own way, and then record the number of times they meet.
	</main>
	
	
	
	
	
	<pre class="prettyprint linenums">
 <code>
import random
def Choice():
    Choice = random.randrange(0 , 2 , 1)
    if Choice == 1:
        return 1
    return 0

crashed_time = 0
N = 1000000
(x , y) = (random.randrange(1 , 4 , 1),random.randrange(1 , 4 , 1))
(a , b) = (random.randrange(1 , 4 , 1),random.randrange(1 , 4 , 1))

for i in range(N):
    
    
    transverse_x = random.randrange(-3 , 4 , 1)
    if Choice == 1:
        
        horizontal_y = - transverse_x
    
    horizontal_y =  transverse_x
    
    
    
    if Choice == 1:
        
        transverse_a =  random.randrange(-1 , 2 , 2)
        transervse_b = 0
    
    horizontal_b =  random.randrange(-1 , 2 , 2)
    transverse_a = 0
    
    
    
    x = x + transverse_x
    y = y + horizontal_y
    
    a = a + transverse_a
    b = b + horizontal_b

        
    
    if x == a and y == b:
        crashed_time = crashed_time + 1
        
        
print(crashed_time / N)
    
 </code>
 </pre>
<pre class="prettyprint linenums">

	
	<section>
	<h3>explain the code</h3>
	</section>
	<main>
	The Choice function here plays a role in randomly setting the probability of the chess 
	piece choosing the direction of up and down, left and right to 1/2, 
	the Choice variable will randomly generate 0 or 1 so it is a probability of 1/2, 
	the next part is the part of the chess piece, after generating the coordinates, 
	the chess piece can start walking.
	<ol>
	<li>The elephant moves in an oblique direction, 
	and the range of each walk can only be in a square of 3 times 3, 
	so the abscissa (expressed in transverse_x) will randomly generate different values in the range of (-3,3), 
	which is used to determine the value of his left or right, (horizontal_y), 
	because the chess moves diagonally, 
	so the value of the horizontal_y should be equal to the value of the transverse_x,
	the 1/2 probability of the Choice function is used to determine:
	whether the ordinate movement is moving down 
	or up to confirm the positive or negative of the horizontal_y.
	
	<li>The soldier's method is relatively simpler, the soldier can only choose to go in four directions of 
	up, down, left and right, 
	then use the Choice function to choose whether to move the x-axis or the y-axis. 
	Then let the x-axis or y-axis randomly choose minus 1 or 1 to let the pawn move. 
	Here the x-axis movement is replaced by (transverse_a) 
	and the longitudinal axis is replaced by (horizontal_b).
	
	<li>In the end, use if to check whether the coordinates of the elephant 
	and the pawn are equal in each turn where both move one step. 
	If they are equal, 
	just add 1 to the meeting variable (which is replaced by crashed_time).
	</ol>
The time that the chess will crashed to each other will not reach higher then 4.
	</main>
	
	
	
	</body>
	
	</html>








